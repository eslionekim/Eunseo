##8주차 연습문제_로그인 실패 

# login.js-> check_input()함수 -> 로그인 실패 시킬 조건에 login_failed();넣기 
if (emailValue.length <10 ) {
    alert('아이디는 최소 10글자 이상 입력해야 합니다. ');
    login_failed(); // 실패 처리
    return false;
 }
 //패스워드 길이 제한
if (passwordValue.length < 15) {
    alert('비밀번호는 반드시 15글자 이상 입력해야 합니다.');
    login_failed(); // 실패 처리
    return false;
 }
//패스워드 특수문자 포함
if (!hasSpecialChar) { //hasSpecialChar가 false일 때,즉 특수문자 없을때때
    alert('패스워드는 특수문자를 1개이상 포함해야합니다.');
    login_failed(); // 실패 처리
    return false;
}
//패스워드 대소문자 포함
if (!hasUpperCase || !hasLowerCase) {//hasUpperCase가 false이거나 hasLowerCase가 false일 경우, 즉 대소문자 둘중 하나만 잇을떼떼
    alert('패스워드는 대소문자를 1개이상 포함해야합니다.');
    login_failed(); // 실패 처리
    return false;
}

# login.js-> init() ->아래 코드 추가
const loginBtn = document.getElementById('login_btn'); // 로그인 버튼 가져오기
const errorContainer = document.getElementById("login_error_message");
// 오류 메시지 표시할 컨테이너 가져오기

let lockout_time = parseInt(getCookie("login_lockout_time")) || 0; 
//쿠키에서 잠금 시간 가져오고, 없으면 기본값 0으로 설정
const lockoutDuration = 4 * 60 * 1000; // 잠금 시간을 4분으로 설정
const currentTime = Date.now(); // 현재 시간

session_check()위에 아래 코드 추가
// 잠금 상태 확인
if (lockout_time && currentTime < lockout_time + lockoutDuration) { //잠금시간 설정, 만료시간보다 이전인지 확인, 
        const remainingTime = lockout_time + lockoutDuration – currentTime; //남은 시간 계산
        displayLockoutMessage(remainingTime); // 남은 잠금 시간 표시
        loginBtn.disabled = true; // 로그인 버튼 비활성화
    } else { //4분 지나면
        errorContainer.style.display = "none"; // 오류 메시지 숨기기
        loginBtn.disabled = false; // 로그인 버튼 활성화
}

# login.js -> 아래 코드 추가
function login_failed() {
    const maxFail = 3; // 최대 실패 횟수
    const lockoutDuration = 4 * 60 * 1000; // 4분 (밀리초 단위)
    let fail_count = parseInt(getCookie("login_fail_cnt")) || 0; // 실패 횟수 가져오기, 없으면 0
    const currentTime = Date.now(); // 현재 시간

    fail_count++; //실패 횟수 증가
    setCookie("login_fail_cnt", fail_count, 7); // 쿠키저장(쿠키명, 실패 횟수, 7일 기간)

    if (fail_count >= maxFail) { //실패 횟수가 3이상
        setCookie("login_lockout_time", currentTime, 7); // 쿠키저장(쿠키명, 현재시간, 7일 기간)
        disableLoginButton(lockoutDuration); // 로그인 버튼 비활성화

        // 즉시 메시지 표시
        displayLockoutMessage(lockoutDuration); //잠금 메시지 표시(4분간)
        return; //더 이상 코드 실행x 종료
    }

    // 실패 메시지 출력
    displayErrorMessage(`로그인 실패 (${fail_count}/${maxFail})`); // 로그인 실패 ex) 1/3 
}



function disableLoginButton(duration) { //로그인 비활(4분간)
    const loginBtn = document.getElementById("login_btn"); //로그인 버튼 가져오기
    if (!loginBtn) return; //로그인 버튼 false면 그냥 지나가기

    loginBtn.disabled = true;  //로그인 비활=true

    setTimeout(() => {
        loginBtn.disabled = false; //로그인 비활=false
    }, duration); //시간 지나면 true
}

function displayErrorMessage(message) { //오류 메시지 ui에 표시
    const errorContainer = document.getElementById("login_error_message"); //오류메시지 가져오기
    if (errorContainer) { //오류메시지 true면
        errorContainer.textContent = message; //오류메시지 설정
        errorContainer.style.display = message ? "block" : "none"; //메시지 있으면 표출하고, 없으면 숨기기
    }
}

function displayLockoutMessage(duration) { //잠금 메시지 표시 (4분간)
    const errorContainer = document.getElementById("login_error_message"); //오류메시지 가져오기
    const loginBtn = document.getElementById("login_btn"); //로그인 버튼 가져오기

    if (!errorContainer || !loginBtn) return; //잠금끝나면 (오류메시지나 로그인 버튼이 없으면) 함수 종료

    loginBtn.disabled = true; // 로그인 버튼 비활성화

    let remainingTime = duration; // 남은 잠금 시간을 4분으로 초기화

    // 남은 시간 업데이트 함수
    const updateMessage = () => { //매초 남은 시간 업데이트
        const minutes = Math.floor(remainingTime / 1000 / 60); //남은 시간을 밀리초->분으로 변환
        const seconds = Math.ceil((remainingTime / 1000) % 60); //남은 시간에서 초 계산
        errorContainer.textContent = `로그인 가능 횟수를 초과하였습니다. ${minutes}분 ${seconds}초 동안 로그인이 제한됩니다.`; //잠금 메시지 숫자 설정
        errorContainer.style.display = "block"; //오류메시지를 화면에 표시
        if (remainingTime <= 0) { 남은 시간이 없으면
            clearInterval(timer); // 타이머 정지
            errorContainer.style.display = "none"; // 메시지 숨기기
            loginBtn.disabled = false; // 버튼 활성화
        } else {
            remainingTime -= 1000; // 남은 시간1초씩 감소
        }
    };
    updateMessage(); //메시지 설정, 화면에 표시
    const timer = setInterval(updateMessage, 1000); //1초 간격으로 반복 실행
}

# login.js-> if(loginBtn) 수정
// 로그인 버튼 이벤트 리스너에 실패 처리 연결
if (loginBtn) {
    loginBtn.addEventListener('click', function () { //로그인 버튼에 클릭 이벤트 추가
        if (!check_input()) { //호출
            return; // 조건 미충족 시 로그인 실패로 종료	
        }

        // 로그인 성공
        alert('로그인 성공!');
        login_count(); // 성공 시 로그인 횟수 카운트
    });
}